//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class xwii_event_ : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal xwii_event_(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(xwii_event_ obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~xwii_event_() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xwiimotePINVOKE.delete_xwii_event_(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint type {
    set {
      xwiimotePINVOKE.xwii_event__type_set(swigCPtr, value);
    } 
    get {
      uint ret = xwiimotePINVOKE.xwii_event__type_get(swigCPtr);
      return ret;
    } 
  }

  public void get_abs(int n, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int z) {
    xwiimotePINVOKE.xwii_event__get_abs(swigCPtr, n, SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(z));
    if (xwiimotePINVOKE.SWIGPendingException.Pending) throw xwiimotePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_abs(int n, int x, int y, int z) {
    xwiimotePINVOKE.xwii_event__set_abs(swigCPtr, n, x, y, z);
    if (xwiimotePINVOKE.SWIGPendingException.Pending) throw xwiimotePINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_key(SWIGTYPE_p_unsigned_int code, SWIGTYPE_p_unsigned_int state) {
    xwiimotePINVOKE.xwii_event__get_key(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(code), SWIGTYPE_p_unsigned_int.getCPtr(state));
  }

  public void set_key(uint code, uint state) {
    xwiimotePINVOKE.xwii_event__set_key(swigCPtr, code, state);
  }

  public void get_time(SWIGTYPE_p_long tv_sec, SWIGTYPE_p_long tv_usec) {
    xwiimotePINVOKE.xwii_event__get_time(swigCPtr, SWIGTYPE_p_long.getCPtr(tv_sec), SWIGTYPE_p_long.getCPtr(tv_usec));
  }

  public void set_time(int tv_sec, int tv_usec) {
    xwiimotePINVOKE.xwii_event__set_time(swigCPtr, tv_sec, tv_usec);
  }

  public bool ir_is_valid(int n) {
    bool ret = xwiimotePINVOKE.xwii_event__ir_is_valid(swigCPtr, n);
    if (xwiimotePINVOKE.SWIGPendingException.Pending) throw xwiimotePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public xwii_event_() : this(xwiimotePINVOKE.new_xwii_event_(), true) {
  }

}
