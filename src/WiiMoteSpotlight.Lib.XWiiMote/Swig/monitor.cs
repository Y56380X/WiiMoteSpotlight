//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace WiiMoteSpotlight.Lib.XWiiMote.Swig {

public class monitor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal monitor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(monitor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~monitor() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xwiimotePINVOKE.delete_monitor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public monitor(bool poll, bool direct) : this(xwiimotePINVOKE.new_monitor(poll, direct), true) {
    if (xwiimotePINVOKE.SWIGPendingException.Pending) throw xwiimotePINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_fd(bool blocking) {
    int ret = xwiimotePINVOKE.monitor_get_fd(swigCPtr, blocking);
    if (xwiimotePINVOKE.SWIGPendingException.Pending) throw xwiimotePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string poll() {
    string ret = xwiimotePINVOKE.monitor_poll(swigCPtr);
    return ret;
  }

}

}
